@page "/"
@using PersonEditApp.Models
@attribute [StreamRendering]

<PageTitle>Home</PageTitle>

<h1>PersonEditApp Home</h1>

<div class="row">
    <div class="col-md-2 d-grid">
    </div>
    <div class="col-md-3 d-grid bg-black">
        <NavLink class="nav-link text-center"  href="add">
            Add Person
        </NavLink>
    </div>
    <div class="col-md-2 d-grid">
    </div>
    <div class="col-md-3 d-grid bg-black">
        <NavLink class="nav-link text-center" href="update">
             Update Person
        </NavLink>
    </div>
    <div class="col-md-2 d-grid">
    </div>
</div>
@if (persons == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Phone No.</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var individual in persons)
            {
                <tr>
                    <td>@individual.Id</td>
                    <td>@individual.Fname</td>
                    <td>@individual.Lname</td>
                    <td>@individual.Email</td>
                    <td>@individual.Phone</td>
                </tr>
            }
        </tbody>
    </table>
}
@inject HttpClient Http
@inject NavigationManager navManager
@code {
    private WeatherForecast[]? forecasts;
    List<Person> persons = new List<Person>();
    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming 
            try
            {
                persons = await Http.GetFromJsonAsync<List<Person>>("https://localhost:7065/api/Persons");
                if (persons.Count()>0)
                {
                    navManager.NavigateTo("/Sucess");
                    Console.WriteLine("Entering");
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Error" + e);
            }
        // await Task.Delay(500);

        // var startDate = DateOnly.FromDateTime(DateTime.Now);
        // var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        // forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        // {
        //     Date = startDate.AddDays(index),
        //     TemperatureC = Random.Shared.Next(-20, 55),
        //     Summary = summaries[Random.Shared.Next(summaries.Length)]
        // }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
